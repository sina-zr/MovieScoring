<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Movies.Api</name>
    </assembly>
    <members>
        <member name="M:Movies.Api.Controllers.AccountController.Register(Movies.Application.Models.Auth.RegisterDto)">
            <summary>
            Endpoint for user register
            </summary>
            <param name="registerDto"></param>
            <response code="400">User Already Exists</response>
            <response code="400">Bad Username</response>
            <response code="400">Bad Password</response>
            <response code="500">Server Error</response>
            <returns>Http Status Codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.AccountController.Login(Movies.Application.Models.Auth.LoginDto)">
            <summary>
            Endpoint for user login
            </summary>
            <param name="loginDto"></param>
            <response code="Û²00">token</response>
            <response code="400">Invalid credentials</response>
            <response code="500">Server Error</response>
            <returns>HttpStatus with message inside. token if ok</returns>
        </member>
        <member name="M:Movies.Api.Controllers.AdminController.AddUser(Movies.Application.Models.User.AddUserDto)">
            <summary>
            Add User from Admin
            </summary>
            <param name="addUserDto"></param>
            <returns>Http Status Code</returns>
        </member>
        <member name="M:Movies.Api.Controllers.AdminController.AddCinemaPeople(Movies.Api.Models.Admin.AddCinemaPeopleDto)">
            <summary>
            Add Celebrity, (Admin only)
            Celebrities are used for determining Movie Actors and Directors (with different endpoints)
            </summary>
            <param name="addDto"></param>
            <returns>Http status codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.AdminController.AddMovie(Movies.Application.Models.Movie.AddMovieDto)">
            <summary>
            Add Movie, (Aadmin only)
            </summary>
            <param name="addDto"></param>
            <returns></returns>
        </member>
        <member name="M:Movies.Api.Controllers.AdminController.UpsertMovieActors(System.UInt64,System.Collections.Generic.List{System.UInt64})">
            <summary>
            Add Actors to a movie, or update them (Admin only)
            </summary>
            <param name="movieId"></param>
            <param name="actorIds">list/array of actor IDs, taken from GetAllCelebrities endpoint</param>
            <returns>Http status codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.AdminController.UpsertMovieDirectors(System.UInt64,System.Collections.Generic.List{System.UInt64})">
            <summary>
            Add Directors to a movie, or update them (Admin only)
            </summary>
            <param name="movieId"></param>
            <param name="directorIds">list/array of director IDs, taken from GetAllCelebrities endpoint</param>
            <returns>Http status codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.AdminController.UpsertMovieGenres(System.UInt64,System.Collections.Generic.List{System.Int32})">
            <summary>
            Add genres to a movie, or update them (Admin only)
            </summary>
            <param name="movieId"></param>
            <param name="genreIds">list/array of director IDs, taken from GetAllGenres endpoint</param>
            <returns>Http status codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.GetMovies(Movies.Api.Models.Movie.MoviesParams)">
            <summary>
            Get a list of movies, filterable
            </summary>
            <param name="moviesParams"></param>
            <response code="200">MovieListVm</response>
            <response code="204">No Content</response>
            <returns></returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.GetMovies(System.UInt64)">
            <summary>
            Returns all Details of a movie
            </summary>
            <param name="id"></param>
            <response code="200">MovieDetailsVm</response>
            <response code="404">Movie Not Found</response>
            <returns>MovieDetailsVm</returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.ScoreMovie(Movies.Api.Models.Movie.ScoreMovieDto)">
            <summary>
            Score a movie by user, range 1 to 10
            </summary>
            <param name="scoreDto"></param>
            <response code="400">invalid score</response>
            <response code="400">this Movie Already scored by this user</response>
            <response code="404">Movie not found</response>
            <response code="500">Server Error</response>
            <returns>Http Status Codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.GetUserMovieScore(System.UInt64)">
            <summary>
            Get the score of a user for a movie
            </summary>
            <param name="movieId"></param>
            <response code="404">movie not found</response>
            <response code="500">Server error</response>
            <returns>score from 1 to 10, or 0 if not scored yet</returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.CommentMovie(Movies.Api.Models.Movie.AddCommentDto)">
            <summary>
            Add a comment to a movie
            </summary>
            <param name="commentDto"></param>
            <returns>Http Status Codes</returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.GetAllGenres">
            <summary>
            get a list of all genres
            </summary>
            <returns></returns>
        </member>
        <member name="M:Movies.Api.Controllers.MoviesController.GetAllCelebrities(System.Int32,System.Int32,System.String)">
            <summary>
            Get a list of celebrities
            </summary>
            <param name="pageId"></param>
            <param name="pageSize"></param>
            <param name="filterName">filter celebrity full name</param>
            <returns>list of celebrities</returns>
        </member>
        <member name="M:Movies.Api.Controllers.WatchlistController.GetUserWatchlist">
            <summary>
            get list of movies of user watchlist
            </summary>
            <response code="204">No Content</response>
            <returns>list of  watchlist view model</returns>
        </member>
        <member name="M:Movies.Api.Controllers.WatchlistController.RecommendWatchlist">
            <summary>
            recommend a list of movies to user
            </summary>
            <response code="400">if user already has a watchlist</response>
            <returns>list of movies</returns>
        </member>
        <member name="M:Movies.Api.Controllers.WatchlistController.AddMovieToWatchlist(System.UInt64)">
            <summary>
            Add a movie to a user watchlist, creates a watchlist if user does not have one
            </summary>
            <param name="movieId">ID of the movie to add to the watchlist</param>
            <returns></returns>
            <response code="200">The movie was successfully added to the user's watchlist.</response>
            <response code="400">Invalid request format or invalid movie ID provided.</response>
            <response code="404">The specified movie could not be found in the database.</response>
            <response code="500">Internal server error occurred while processing the request.</response>
        </member>
    </members>
</doc>
